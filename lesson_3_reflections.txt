When would you want to use a remote repository rather than keeping all your work local?

It's useful when working in a team in the same project. Each of you can work independently and locally in your own
computer and local repository and then share your progress with the rest of the team by pushing your changes to
the remote repository, that all the team share. It's also helpful when you want to share with the community some of
your projects (either working in a team or only by yourself). And for that, using GitHub makes easy to do it.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your
remote repository?

Because this way you can keep the independency between your local repository and the remote as long as you want. You
can pull a branch from the remote. Then, you can work on it without being worried about the changes that other
collaborators could push to the remote. And if in one certain moment you need to bring that other changes to your local
copy (or push your own changes and share them with everybody), you can choose that moment. And it will be then when you
could need to deal with possible conflicts (and not at any time, as it would happens if you keep your local repository
always updated with regard of the remote).

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are used to copy a remote from GitHub to your own remote in your own GitHub account. It's useful when you want to
do some changes in someone else's project but you are not a collaborator for that project (you don't have the owner
permission for directly push your changes into the original remote). Clones are used for copying a repository from one
place to another: from GitHub (a remote) to your computer (in order to have your local repository for that remote, so
you can do your changes locally in your computer and then push them to the remote); or from one local repository in
your computer to another local repository in another directory of your filesystem. Finally, branches are used for
creating a new history line inside a repository. This allows you to keep the changes that you make in that new branch
separate from the original branch.

What is the benefit of having a copy of the last known state of the remote stored locally?

It's very helpful in the moment of pulling changes from the remote. This way, the status on the remote at the moment
you last update the local copy with regard of the remote is known. So, it's no needed to look before that point in the
history line. It's only needed to check if after that there are conflictive changes in both places: the remote and the
local repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

Collaborating or working in a development team without using a version control system at all is too much harder than 
using it (and I think that Git and GitHub provide a lot of useful additional features in comparison with other version
control systems that I am used to, such as SVN and CVS). Without a version control system you could be able to
collaborate with others for example by sharing your changes in the code project by a "manual" mean (i.e. an email or a
removable disk) and notifying the rest of the team about your changes by some kind of message (like an email), in order
to them being able to revise those changes and contribute with their own changes to the project.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each
approach have?

As we have already said, working directly in the master branch is easier than using separate branches. On the other
hand, using multiple branches gives a better structure to all the changes that are happening in the project at each
moment, and more flexibility when deciding which changes would be finally included into master (and, for example, in
the next release) and which change would not. With this in mind, my team and me usually use separate branches in our
projects because we usually work with many concurrent changes in the code without knowing at the beginning when each of
them would be included in our "official" version. Even sometimes could happen that we finally discard all the changes
in a branch. And with multiple branches we can do all of that without affecting our master branch, where our released
version (that can not fail at all) is hosted.
